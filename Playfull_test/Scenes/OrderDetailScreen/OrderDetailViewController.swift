//
//  OrderDetailViewController.swift
//  Playfull_test
//
//  Created by ISOL on 11/09/18.
//  Copyright (c) 2018 Example. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol OrderDetailDisplayLogic: class
{
    func displayOrderDetails(viewModel: OrderDetail.GetOrderDetails.ViewModel)
    func failedToGetOrderDetails(message: String)
}

class OrderItemTableViewCell : UITableViewCell
{
        @IBOutlet weak var lblItemName: UILabel!
        @IBOutlet weak var lblSelectedOptionDescription: UILabel!
        @IBOutlet weak var lblQuantity: UILabel!
        @IBOutlet weak var lblPriceAmount: UILabel!
}

class OrderDetailViewController: UIViewController, UITableViewDelegate, UITableViewDataSource, OrderDetailDisplayLogic
{
    
    @IBOutlet weak var restaurantImgView: UIImageView!
    @IBOutlet weak var restaurantName: UILabel!
    @IBOutlet weak var restaurantOpenStatus: UILabel!
    @IBOutlet weak var lblOrderDate: UILabel!
    @IBOutlet weak var lblOrderStatus: UILabel!
    @IBOutlet weak var lblUUID: UILabel!
    @IBOutlet weak var lblTaxAmount: UILabel!
    @IBOutlet weak var lblTotalAmount: UILabel!
    
    @IBOutlet weak var itemsDetailView: UIView!
    @IBOutlet weak var tblView: UITableView!
    
  var interactor: OrderDetailBusinessLogic?
  var router: (NSObjectProtocol & OrderDetailRoutingLogic & OrderDetailDataPassing)?
  var orderData: OrderDetail.GetOrderDetails.ViewModel?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = OrderDetailInteractor()
    let presenter = OrderDetailPresenter()
    let router = OrderDetailRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
    // MARK: View lifecycle
  
    override func viewDidLoad()
    {
        super.viewDidLoad()
        getOrderDetails()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        CommonFunctions.setRoundCornerOfView(view: restaurantImgView)
    }
  
    // MARK: Fetch Order Details
    func getOrderDetails()
    {
        let request = OrderDetail.GetOrderDetails.Request()
        interactor?.getOrderDetails(request: request)
    }
  
    // MARK: OrderDetailDisplayLogic methods implementations
    
    // Called when get order detail data
    func displayOrderDetails(viewModel: OrderDetail.GetOrderDetails.ViewModel)
    {
        orderData = viewModel
        displayDataOnScreeen()
    }
    
    // Called when failed to get the order detail view
    func failedToGetOrderDetails(message: String) {
        print(message)
    }
    
    // This method set the data in the all labels and tableView, set round corner to restaurant imageView, shadow to items detail views as per screen
    func displayDataOnScreeen(){
        DispatchQueue.main.async {
            self.lblTotalAmount.text = self.orderData?.total
            self.lblOrderDate.text = self.orderData?.orderDate
            self.lblOrderStatus.text = self.orderData?.status
            self.lblUUID.text = self.orderData?.orderUUID ?? ""
            self.restaurantName.text = self.orderData?.restaurantName
            self.lblTaxAmount.text = self.orderData?.taxAmount
            self.restaurantOpenStatus.text = self.orderData?.openStatus
            
            // Set restaurant open_status label color according to status
            if(self.orderData?.openStatus == OPEN_STRING) {
                self.restaurantOpenStatus.textColor = OPEN_STATUS_COLOR
            } else {
                self.restaurantOpenStatus.textColor = CLOSED_STATUS_COLOR
            }
            CommonFunctions.setRoundCornerOfView(view: self.restaurantImgView)
            self.tblView.reloadData()
            
            // Download image for restaurant imageView
            if(self.orderData?.restaurantLogo != nil){
                self.downloadImageFromTheServerAndSetInRestaurantImgView(imageUrl: (self.orderData?.restaurantLogo)!)
            }
            CommonFunctions.setShadowToTheView(view: self.itemsDetailView)
            
            // set Title of the screen
            self.title = "Order Details"
            

        }
    }
    
    // Download Image from the server and set the Restaurant Image in the screen.
    func downloadImageFromTheServerAndSetInRestaurantImgView(imageUrl : String)
    {
        CommonFunctions.getDownloadImage(imageUrl: imageUrl, onSuccess: { (imgData) in
            DispatchQueue.main.async() {
                if(imgData != nil)  {
                    self.restaurantImgView.image = imgData
                }
            }
        }) { (message) in
            print(message!)
        }
    }
    
    // MARK: - Table view data source
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        if (orderData != nil) {
            if let items = orderData?.items {
                return items.count
            }
        }
        return 0
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 100
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let item = orderData?.items?[indexPath.row]
        var cell = tableView.dequeueReusableCell(withIdentifier: "OrderItemTableViewCell") as? OrderItemTableViewCell
        if cell == nil {
            cell = UITableViewCell(style: .default, reuseIdentifier: "OrderItemTableViewCell") as? OrderItemTableViewCell
        }
        
        cell?.lblItemName.text = item?.name
        cell?.lblQuantity.text = item?.quantity
        cell?.lblPriceAmount.text = item?.priceAmount
        cell?.lblSelectedOptionDescription.text = item?.selectedOptionsDescription
        
        return cell!
    }
}
