//
//  OrderHistoryPresenter.swift
//  Playfull_test
//
//  Created by ISOL on 10/09/18.
//  Copyright (c) 2018 Example. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol OrderHistoryPresentationLogic
{
  func presentFetchedOrderHistory(response: OrderHistory.FetchOrders.Response)
  func failedToPresentFetchedOrderHistory(message: String)
}

class OrderHistoryPresenter: OrderHistoryPresentationLogic
{
  weak var viewController: OrderHistoryDisplayLogic?
  
  // MARK: Implement OrderHistoryPresentationLogic methods
  
    // Called when got data from the interactor of scene
    func presentFetchedOrderHistory(response: OrderHistory.FetchOrders.Response)
    {
        let viewModel = getViewModelFromResponse(response: response)
        viewController?.displayOrderHistoryData(viewModel: viewModel)
    }
    
    // Called when failed to get data from the interactor of scene
    func failedToPresentFetchedOrderHistory(message: String) {
        viewController?.displayFailureMessage(message: message)
    }
    
    // MARK: Get view model data
    
    func getViewModelFromResponse(response: OrderHistory.FetchOrders.Response) -> OrderHistory.FetchOrders.ViewModel
    {
        let orders = response.orders
        var ordersDisplayDataAry = [OrderHistory.FetchOrders.ViewModel.OrderDisplayData]()
        for order in orders! {
            if let order = order as? Order {
                let restaurantName = order.restaurant?.name
                let restaurantLogo = order.restaurant?.imageUrl
                let orderDate = CommonFunctions.convertDateFormatter(dateStr: order.pickedUpAt)
                let status = STATUS[order.status!] ?? ""
                let totalAmount = CommonFunctions.priceFormater(price: order.details?.totalAmount)
                let openStatus = CommonFunctions.openStatusForStatusString(status: order.restaurant?.openState)
                let ordersDisplayData = OrderHistory.FetchOrders.ViewModel.OrderDisplayData(restaurantName: restaurantName, restaurantLogo: restaurantLogo, orderDate: orderDate, status: status, total: totalAmount, openStatus: openStatus)
                ordersDisplayDataAry.append(ordersDisplayData)
            }
        }
        let viewModel = OrderHistory.FetchOrders.ViewModel(ordersDataAry: ordersDisplayDataAry)
        return viewModel
    }
    

}
